#pragma once
#ifndef _DNA_ALG
#define _DNA_ALG

#include "bomce.h"
#include "graphutility.h"

namespace webgr
{
	BOMCE_TEMPLATE_DEF
		// поиск порядка обхода
		class dna_order_alg
	{
		friend bomce_vdist_family<BOMCE_TEMPLATE_ARGS>;
		friend bomce_vdist_family<BOMCE_TEMPLATE_ARGS>::v_distribution;
	private:

	public:

	};

	BOMCE_TEMPLATE_DEF
		// Поиск стартового распределения
		class dna_distribution_alg
	{
		friend bomce_vdist_family<BOMCE_TEMPLATE_ARGS>;
		friend bomce_vdist_family<BOMCE_TEMPLATE_ARGS>::v_distribution;
	private:

	public:

	};
}

/*
Наиболее предпочтительным является сценарий 3
Сценарий 3 совместим с алгоритмом поиска пересекающихся кластеров

С начальным разбиением и/или первым обходом определённо нужно что-то делать
*/

/*
Сценарий 1

Генетический алгоритм для поиска оптимального(или неочень оптимального)
порядка обхода графа при кластеризазии алгоритмом bomce
Данный файл включается в bomce.h, а объект создаётся в bomce_vdist_family

популяция: параметр alpha, вектор(или не вектор) значений от 0 до graph.size()
вычислить: оптимальный(или не очень) порядок обхода и значение(диапазон значений)
параметра alpha

мутация происходит путём перестановки в одном и том же векторе(кросовер между
разными особями невозможен)
*/

/*
Сценарий 2

Генетический алгоритм для поиска оптимального(или неочень оптимального)
распределения вершин по кластерам, для дальнейшего улучшения путём обычных
обходов графа в случайном порядке
В этом случае параметр alpha не требуется вообще

популяция: bomce_vdist_family

Возможен самый обычный кросовер
В этом случае целевой функцией будет сумма значений q для всех перемещений из вершины в кластер
*/

/*
Сценарий 3
Особью является порядок обхода вершин с возможностью повторения(вершина может быть перемещена несколько раз) фиксированой длины
Также такие обходы могут конкатенироваться или удлинятся(дополнительные перемещения в начале или в конце)
Пример:
8 23 5 6 999 7 4 + 2 3 10 1 5 = 8 23 5 6 999 7 4 2 3 10 1 5
2 3 10 1 5 + 8 23 5 6 999 7 4 = 2 3 10 1 5 8 23 5 6 999 7 4
В этом случае возможен полноценный кросовер
*/

#endif // _DNA_ALG